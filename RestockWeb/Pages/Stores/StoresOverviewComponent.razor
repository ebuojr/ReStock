@page "/stores"

<PageTitle>Stores</PageTitle>


<div class="w-full p-6 relative" x-data="{ editopen: false }">

    <!-- Header Section -->
    <div class="w-full p-2 flex justify-between items-center mb-4">
        <h1 class="text-2xl font-semibold">Store Overview</h1>
        <div class="flex gap-2">
            <!-- Search Input -->
            <input type="text" @bind="SearchTerm" @bind:event="oninput" placeholder="Search stores..."
            class="border border-gray-300 rounded px-4 py-2 text-sm w-64" />
            <!-- Create New Store Button -->
            <button x-on:click="editopen = true" @onclick="() => { SelectedStore = new() {Id = 0}; }" class="bg-gray-600 text-sm text-white px-4 py-1.5 rounded">
                Create New Store
            </button>
        </div>
    </div>

    <!-- Responsive store grid -->
    <div class="w-full grid grid-cols-1 gap-2">
        @foreach (var store in FilteredStores)
        {
            <div class="bg-white rounded border border-gray-300 flex flex-col relative px-2 py-4 hover:bg-gray-50 duration-75" style="overflow: visible;">
                <!-- Store Details -->
                <div class="p-4 grid grid-cols-1 lg:grid-cols-4 gap-4">
                    <a href="/stores/@store.No" class="flex items-center gap-1 text-sm font-semibold text-gray-900 truncate hover:underline hover:text-blue-600 duration-75">
                       @store.Name
                       <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-4">
                           <path fill-rule="evenodd" d="M4.22 11.78a.75.75 0 0 1 0-1.06L9.44 5.5H5.75a.75.75 0 0 1 0-1.5h5.5a.75.75 0 0 1 .75.75v5.5a.75.75 0 0 1-1.5 0V6.56l-5.22 5.22a.75.75 0 0 1-1.06 0Z" clip-rule="evenodd" />
                       </svg>
                    </a>
                    <p class="text-sm text-gray-600">Store Number: <span class="font-medium">@store.No</span></p>
                    <p class="text-sm text-gray-600">Country: <span class="font-medium">@store.Country</span></p>
                    <p class="text-sm text-gray-600">Address: <span class="font-medium">@store.Address</span></p>
                </div>
                <!-- Action Menu -->
                <div class="absolute p-4 z-[10] end-0" x-data="{ open: false }">
                    <button x-on:click="open = !open" class="text-gray-500 hover:text-gray-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v.01M12 12v.01M12 18v.01" />
                        </svg>
                    </button>
                    <div x-show="open" x-on:click.away="open = false" x-transition class="absolute right-10 bottom-6 w-48 bg-white shadow border border-gray-300 rounded" style="overflow: visible;">
                        <ul>
                            <li>
                                <button x-on:click="open = false; editopen = true" @onclick="() => { SelectedStore = store; }" class="block px-4 py-2 text-xs text-gray-500 hover:bg-gray-100 w-full text-left rounded hover:underline">Update store</button>
                            </li>
                            <li>
                                <button @onclick="() => DeleteStore(store)" class="block px-4 py-2 text-xs text-gray-500 hover:bg-gray-100 w-full text-left rounded hover:underline">Delete store</button>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Edit Modal -->
    <div x-show="editopen"
    x-cloak
    x-transition
    class="fixed top-0 right-0 w-lg h-screen bg-white z-[10] p-2 border border-gray-300 shadow">

        <!-- Close Button -->
        <button x-on:click="editopen = false" class="absolute top-8 right-4 text-gray-500 hover:text-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>

        <div class="px-4 py-6">
            <h1 class="text-xl font-bold text-gray-400">Store Info</h1>

            <div class="mt-4 space-y-4">
                <!-- Store Number Input -->
                <div>
                    <label for="storeNo" class="block text-sm font-medium text-gray-700">Store Number</label>
                    <input id="storeNo" type="number" @bind="SelectedStore.No" class="mt-1 block w-full border border-gray-300 rounded px-4 py-2 text-sm" />
                </div>

                <!-- Name Input -->
                <div>
                    <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
                    <input id="name" type="text" @bind="SelectedStore.Name" class="mt-1 block w-full border border-gray-300 rounded px-4 py-2 text-sm" />
                </div>

                <!-- Country Input -->
                <div>
                    <label for="country" class="block text-sm font-medium text-gray-700">Country</label>
                    <input id="country" type="text" @bind="SelectedStore.Country" class="mt-1 block w-full border border-gray-300 rounded px-4 py-2 text-sm" />
                </div>

                <!-- Address Input -->
                <div>
                    <label for="address" class="block text-sm font-medium text-gray-700">Address</label>
                    <input id="address" type="text" @bind="SelectedStore.Address" class="mt-1 block w-full border border-gray-300 rounded px-4 py-2 text-sm" />
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="absolute bottom-4 w-full space-y-2 text-sm">

            @if (SelectedStore.Id != 0)
            {
                <button @onclick="() => UpdateStore(SelectedStore)" x-on:click="editopen = false;" class="w-full bg-gray-600 text-white px-6 py-2 rounded transition-all">
                    Save Changes
                </button>
                <button @onclick="() => DeleteStore(SelectedStore)" x-on:click="editopen = false;" class="w-full bg-white text-gray-600 px-6 py-2 rounded hover:bg-gray-200 transition-all">
                    Remove Store
                </button>
            }
            else
            {
                <button @onclick="() => CreateNewStore(SelectedStore)" x-on:click="editopen = false;" class="w-full bg-gray-600 text-white px-6 py-2 rounded transition-all">
                    Create New Store
                </button>
            }
        </div>
    </div>
</div>

@code {

    [Inject]
    public IStoreService _StoreService { get; set; } = default!;

    [Inject]
    public IToastService _ToastService { get; set; } = default!;

    public List<Store> Stores { get; set; } = new List<Store>();
    public List<Store> FilteredStores { get; set; } = new List<Store>();

    private string _searchTerm = string.Empty;
    private string SearchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                FilterStores();
            }
        }
    }
    private Store SelectedStore { get; set; } = new Store();


    protected override async Task OnInitializedAsync()
    {
        Stores = await _StoreService.GetAllStoresAsync();
        FilteredStores = Stores;
    }

    private void FilterStores()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            FilteredStores = Stores;
        }
        else
        {
            FilteredStores = Stores.Where(s => s.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    async Task CreateNewStore(Store store)
    {
        try
        {
            var newStore = await _StoreService.CreateStoreAsync(store);
            if (newStore)
                Stores = await _StoreService.GetAllStoresAsync() ?? new List<Store>();

            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    async Task UpdateStore(Store store)
    {
        try
        {
            var updatedStore = await _StoreService.UpdateStoreAsync(store);
            if (updatedStore)
                Stores = await _StoreService.GetAllStoresAsync() ?? new List<Store>();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    async Task DeleteStore(Store store)
    {
        try
        {
            var deletedStore = await _StoreService.DeleteStoreAsync(store.Id);
            if (deletedStore)
                Stores = await _StoreService.GetAllStoresAsync() ?? new List<Store>();

            SearchTerm = string.Empty;
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
